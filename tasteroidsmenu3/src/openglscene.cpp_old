#include "openglscene.h"
#include "model.h"
#include <QPaintEngine>
#include <QGraphicsSceneMouseEvent>
#include <QApplication>
#include <QTimer>

#ifndef GL_MULTISAMPLE
#define GL_MULTISAMPLE  0x809D
#endif

OpenGLScene::OpenGLScene()
	: m_wireframeEnabled(true)
	, m_normalsEnabled(false)
	, m_modelColor(255, 255, 255)
	, m_backgroundColor(0, 7, 24)
	, m_model(0)
	, m_lastTime(0)
	, m_distance(1.0f)
	, m_angularMomentum(0, 40, 0)
{

#ifndef QT_NO_CONCURRENT
	connect(&m_modelLoader, SIGNAL(finished()), this, SLOT(modelLoaded()));
#endif

	loadModel(QLatin1String(":menu_files/golevka.obj"));
	m_time.start();
}

void OpenGLScene::drawBackground(QPainter *painter, const QRectF &)
{
	if (painter->paintEngine()->type() != QPaintEngine::OpenGL) {
		qWarning("OpenGLScene: drawBackground needs a QGLWidget to be set as viewport on the graphics view");
		return;
	}

	glClearColor(m_backgroundColor.redF(), m_backgroundColor.greenF(), m_backgroundColor.blueF(), 1.0f);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	if (!m_model)
		return;

	glMatrixMode(GL_PROJECTION);
	glPushMatrix();
	glLoadIdentity();
	gluPerspective(70, width() / height(), 0.01, 1000);

	glMatrixMode(GL_MODELVIEW);
	glPushMatrix();
	glLoadIdentity();

	//const float pos[] = { m_lightItem->x() - width() / 2, height() / 2 - m_lightItem->y(), 512, 0 };
	//glLightfv(GL_LIGHT0, GL_POSITION, pos);
	glColor4f(m_modelColor.redF(), m_modelColor.greenF(), m_modelColor.blueF(), 1.0f);

	const int delta = m_time.elapsed() - m_lastTime;
	m_rotation += m_angularMomentum * (delta / 1000.0);
	m_lastTime += delta;

	glTranslatef(0, 0, -m_distance);
	glRotatef(m_rotation.x, 1, 0, 0);
	glRotatef(m_rotation.y, 0, 1, 0);
	glRotatef(m_rotation.z, 0, 0, 1);

	glEnable(GL_MULTISAMPLE);
	m_model->render(m_wireframeEnabled, m_normalsEnabled);
	glDisable(GL_MULTISAMPLE);

	glPopMatrix();

	glMatrixMode(GL_PROJECTION);
	glPopMatrix();

	QTimer::singleShot(20, this, SLOT(update()));
}

static Model *loadModel(const QString &filePath)
{
	return new Model(filePath);
}

void OpenGLScene::loadModel(const QString &filePath)
{
	if (filePath.isEmpty())
		return;

	//QApplication::setOverrideCursor(Qt::BusyCursor);
#ifndef QT_NO_CONCURRENT
	m_modelLoader.setFuture(QtConcurrent::run(::loadModel, filePath));
#else
	setModel(::loadModel(filePath));
	modelLoaded();
#endif
}

void OpenGLScene::modelLoaded()
{
#ifndef QT_NO_CONCURRENT
	setModel(m_modelLoader.result());
#endif
	//QApplication::restoreOverrideCursor();
}

void OpenGLScene::setModel(Model *model)
{
	delete m_model;
	m_model = model;

	update();
}

void OpenGLScene::enableWireframe(bool enabled)
{
	m_wireframeEnabled = enabled;
	update();
}

void OpenGLScene::enableNormals(bool enabled)
{
	m_normalsEnabled = enabled;
	update();
}

void OpenGLScene::mouseMoveEvent(QGraphicsSceneMouseEvent *event)
{
	QGraphicsScene::mouseMoveEvent(event);
	if (event->isAccepted())
		return;
	if (event->buttons() & Qt::LeftButton) {
		const QPointF delta = event->scenePos() - event->lastScenePos();
		const Point3d angularImpulse = Point3d(delta.y(), delta.x(), 0) * 0.1;

		m_rotation += angularImpulse;
		m_accumulatedMomentum += angularImpulse;

		event->accept();
		update();
	}
}

void OpenGLScene::mousePressEvent(QGraphicsSceneMouseEvent *event)
{
	QGraphicsScene::mousePressEvent(event);
	if (event->isAccepted())
		return;

	m_mouseEventTime = m_time.elapsed();
	m_angularMomentum = m_accumulatedMomentum = Point3d();
	event->accept();
}

void OpenGLScene::mouseReleaseEvent(QGraphicsSceneMouseEvent *event)
{
	QGraphicsScene::mouseReleaseEvent(event);
	if (event->isAccepted())
		return;

	const int delta = m_time.elapsed() - m_mouseEventTime;
	m_angularMomentum = m_accumulatedMomentum * (1000.0 / qMax(1, delta));
	event->accept();
	update();
}

void OpenGLScene::wheelEvent(QGraphicsSceneWheelEvent *event)
{
	QGraphicsScene::wheelEvent(event);
	if (event->isAccepted())
		return;

	m_distance *= qPow(1.2, -event->delta() / 120);
	event->accept();
	update();
}
